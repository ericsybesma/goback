package dal

import (
	"github.com/stretchr/testify/mock"
)

/* here is the  Item interface {
	Namespace() string
	ItemGroup() string
	GetKey() interface{}
	SetKey(interface{}) error
	Marshal() ([]byte, error)
	Unmarshal([]byte) error
	New() Item
}
*/

// MockItem is an autogenerated mock type for the Item type
type MockItem struct {
	mock.Mock
}

// Namespace provides a mock function with given fields:
func (_m *MockItem) Namespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ItemGroup provides a mock function with given fields:
func (_m *MockItem) ItemGroup() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetKey provides a mock function with given fields:
func (_m *MockItem) GetKey() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interface{})
	}

	return r0
}

// SetKey provides a mock function with given fields: key
func (_m *MockItem) SetKey(key interface{}) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Marshal provides a mock function with given fields:
func (_m *MockItem) Marshal() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).([]byte)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unmarshal provides a mock function with given fields: data
func (_m *MockItem) Unmarshal(data []byte) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// New provides a mock function with given fields:
func (_m *MockItem) New() Item {
	ret := _m.Called()

	var r0 Item
	if rf, ok := ret.Get(0).(func() Item); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Item)
	}

	return r0
}